const express = require('express');
const PDFDocument = require('pdfkit');
const fs = require('fs');

const app = express();
app.use(express.json());

const PORT = process.env.PORT || 3000;

app.post('/generate-pdf', (req, res) => {
    const data = req.body;
    const doc = new PDFDocument({ margin: 30, size: 'A4' });
    const filename = 'vaccine-medication-report.pdf';

    res.setHeader('Content-disposition', 'attachment; filename="' + filename + '"');
    res.setHeader('Content-type', 'application/pdf');

    doc.pipe(res);

    generateVaccineMedicationPDF(doc, data);

    doc.end();
});

function generateVaccineMedicationPDF(doc, data) {
    // We'll track the current page as we go
    let currentPage = 1;
    
    // Add page elements for the first page
    addPageElements(doc, data.document_header, currentPage);

    // Generate Hatchery and Chick Info
    if (data.hatcheryandChickInfo) {
        printKeyValueSection(doc, data.hatcheryandChickInfo, "Hatchery and Chick Information", 3); // Use 3 columns
    }

    // Generate Vaccine During Grow-Out Section
    if (data.vaccineDuringGrowOut) {
        // Only add a new page if we're close to the bottom
        if (doc.y > 650) {
            doc.addPage();
            currentPage++;
            addPageElements(doc, data.document_header, currentPage);
        }
        
        // Print section heading
        doc.font('Helvetica-Bold').fontSize(11).fillColor('black').text(
            data.vaccineDuringGrowOut.sectionHeading || "Vaccines During Grow-Out", 
            30, doc.y, { align: 'left', underline: true }
        );
        doc.moveDown(0.5);
        
        // Print checkbox right after the heading
        if (data.vaccineDuringGrowOut.vaccinesAgreement) {
            printCheckbox(doc, data.vaccineDuringGrowOut.vaccinesAgreement);
        }
        
        // Then print the vaccine table (without printing its own heading)
        printTable(doc, data.vaccineDuringGrowOut, false); // Pass false to skip printing the section heading
    }

    // Generate Medication During Grow-Out Section
    if (data.medicationdDuringGrowOut) {
        // Only add a new page if we're close to the bottom
        if (doc.y > 650) {
            doc.addPage();
            currentPage++;
            addPageElements(doc, data.document_header, currentPage);
        }
        
        // Print section heading
        doc.font('Helvetica-Bold').fontSize(11).fillColor('black').text(
            data.medicationdDuringGrowOut.sectionHeading || "Medication During Grow-Out", 
            30, doc.y, { align: 'left', underline: true }
        );
        doc.moveDown(0.5);
        
        // Print checkbox right after the heading
        if (data.medicationdDuringGrowOut.medicationAgreement) {
            printCheckbox(doc, data.medicationdDuringGrowOut.medicationAgreement);
        }
        
        // Then print the medication table (without printing its own heading)
        printTable(doc, data.medicationdDuringGrowOut, false); // Pass false to skip printing the section heading
    }

    // Generate Radio Button Section
    if (data.medicationdDuringGrowOutRadio) {
        // Only add a new page if we're close to the bottom
        if (doc.y > 650) {
            doc.addPage();
            currentPage++;
            addPageElements(doc, data.document_header, currentPage);
        }
        
        printRadioButtonSection(doc, data.medicationdDuringGrowOutRadio);
    }

    // Generate Comments Section
    if (data.comments) {
        // Only add a new page if we're close to the bottom
        if (doc.y > 650) {
            doc.addPage();
            currentPage++;
            addPageElements(doc, data.document_header, currentPage);
        }
        
        printCommentsSection(doc, data.comments);
    }
}

function addPageElements(doc, header, pageNumber) {
    // Add logo if available
    try {
        doc.image('sapCompanyLogo.png', 30, 30, { width: 50 });
    } catch (error) {
        console.log('Logo not found, skipping...');
    }

    // Add header
    doc.font('Helvetica-Bold').fontSize(14).text(header, 0, 40, { align: 'center' });

    // Add just the current page number
    doc.font('Helvetica').fontSize(10).text(`Page ${pageNumber}`, 500, 780);

    // Set the Y position to start content below the header
    doc.y = 100;
}

function printKeyValueSection(doc, section, sectionTitle, numColumns = 2) {
    doc.font('Helvetica-Bold').fontSize(11).fillColor('black').text(sectionTitle, 30, doc.y, { align: 'left', underline: true });
    doc.moveDown(0.5);

    const fields = Object.entries(section).filter(([key]) => 
        key !== 'sectionHeading' && typeof section[key] === 'object' && section[key] !== null && 'label' in section[key]);
    
    // Calculate column width based on number of columns
    const pageWidth = 530; // Available width
    const columnWidth = pageWidth / numColumns;
    const startX = 30;

    for (let i = 0; i < fields.length; i += numColumns) {
        const row = fields.slice(i, i + numColumns);
        
        // Print labels and values side by side
        const labelY = doc.y;
        row.forEach(([, field], index) => {
            const x = startX + (index * columnWidth);
            doc.font('Helvetica-Bold').fontSize(9).text(field.label, x, labelY);
            doc.font('Helvetica').fontSize(10).text(field.value.toString(), x, labelY + 15);
        });

        // Move to next line
        doc.moveDown(1.5);
    }

    // Check for and print any additional text fields
    const textFields = Object.entries(section).filter(([key, value]) => 
        key !== 'sectionHeading' && typeof value === 'string');
    
    textFields.forEach(([key, value]) => {
        doc.font('Helvetica-Bold').fontSize(10).text(key, 30, doc.y);
        doc.font('Helvetica').fontSize(10).text(value, 30, doc.y + 15, { width: 530 });
        doc.moveDown(1.5);
    });

    doc.moveDown(0.5);
}

function printCheckbox(doc, checkboxData) {
    const y = doc.y;
    
    // Draw checkbox
    doc.rect(30, y, 12, 12).stroke();
    
    // If checked, draw X inside the checkbox
    if (checkboxData.checkbox) {
        doc.moveTo(30, y).lineTo(42, y + 12).stroke();
        doc.moveTo(42, y).lineTo(30, y + 12).stroke();
    }
    
    // Print agreement text beside the checkbox
    doc.font('Helvetica').fontSize(10).text(checkboxData.agreementText, 50, y + 2);
    
    doc.moveDown(1);
}

function printTable(doc, tableData, printHeading = true) {
    // Print the section heading if requested
    if (printHeading) {
        const title = tableData.sectionHeading || "Table Data";
        doc.font('Helvetica-Bold').fontSize(11).text(title, 30, doc.y, { align: 'left', underline: true });
        doc.moveDown(0.5);
    }

    // Get column headers, filtering out any non-column properties
    const headerKeys = Object.keys(tableData.columnHeader || {});
    const headers = headerKeys.map(key => tableData.columnHeader[key]);
    
    // Get row data
    const rows = tableData.rows ? tableData.rows.map(row => {
        return headerKeys.map((key, index) => {
            // Convert column1, column2, etc. to value1, value2, etc.
            const valueKey = `value${index+1}`;
            return row[valueKey] || '';
        });
    }) : [];
    
    const tableWidth = 530; // Adjust as needed for full width
    const cellPadding = 5;
    const cellWidth = tableWidth / headers.length;
    const minRowHeight = 20;

    let yPosition = doc.y;

    // Calculate header height
    let headerHeight = minRowHeight;
    headers.forEach(header => {
        const headerLines = doc.heightOfString(header, {
            width: cellWidth - (2 * cellPadding),
            align: 'left'
        });
        headerHeight = Math.max(headerHeight, headerLines + 2 * cellPadding);
    });

    // Draw header with background color
    doc.fillColor('#083446').rect(30, yPosition, tableWidth, headerHeight).fill();
    doc.fillColor('white').font('Helvetica-Bold').fontSize(10);
    headers.forEach((header, i) => {
        doc.text(header, 30 + (i * cellWidth) + cellPadding, yPosition + cellPadding, {
            width: cellWidth - (2 * cellPadding),
            align: 'left'
        });
    });

    yPosition += headerHeight;

    // Draw rows
    doc.fillColor('black').font('Helvetica').fontSize(10); // Reset text color and font for rows
    rows.forEach((row, rowIndex) => {
        let rowHeight = minRowHeight;
        // Calculate row height
        row.forEach((cell, i) => {
            const cellContent = cell ? cell.toString() : '';
            const cellLines = doc.heightOfString(cellContent, {
                width: cellWidth - (2 * cellPadding),
                align: 'left'
            });
            rowHeight = Math.max(rowHeight, cellLines + 2 * cellPadding);
        });

        // Draw alternating row background
        if (rowIndex % 2 === 0) {
            doc.fillColor('#f2f2f2').rect(30, yPosition, tableWidth, rowHeight).fill();
        }
        doc.fillColor('black'); // Reset to black text

        // Draw cells
        row.forEach((cell, i) => {
            const cellContent = cell ? cell.toString() : '';
            doc.text(cellContent, 30 + (i * cellWidth) + cellPadding, yPosition + cellPadding, {
                width: cellWidth - (2 * cellPadding),
                align: 'left'
            });
        });
        yPosition += rowHeight;
    });

    doc.y = yPosition + 10; // Move the cursor below the table
    doc.moveDown();
}

function printRadioButtonSection(doc, radioSection) {
    // Print section heading if available
    if (radioSection.sectionHeading) {
        doc.font('Helvetica-Bold').fontSize(11).fillColor('black')
           .text(radioSection.sectionHeading, 30, doc.y, { align: 'left', underline: true });
        doc.moveDown(0.5);
    }

    // Get all radio button fields
    const radioFields = Object.entries(radioSection)
        .filter(([key, value]) => 
            key !== 'sectionHeading' && 
            typeof value === 'object' && value !== null && 
            'name' in value && 'options' in value && 'selected' in value);
    
    // Print each radio button set
    radioFields.forEach(([, field]) => {
        const rowY = doc.y;
        
        // Print the question/name
        doc.font('Helvetica').fontSize(10);
        doc.text(field.name, 30, rowY, { width: 350 });
        
        // Calculate row height based on text height
        const textHeight = doc.heightOfString(field.name, { width: 350 });
        const rowHeight = Math.max(20, textHeight); // Min height of 20
        
        // Get the options
        const optionKeys = Object.keys(field.options);
        
        // Calculate the vertical center of the row for alignment
        const verticalCenter = rowY + (rowHeight / 2);
        
        // Draw the radio buttons with option text
        let optionX = 400; // Starting position for first option
        
        optionKeys.forEach((key) => {
            const isSelected = field.selected === key;
            const labelText = field.options[key]; // "Yes" or "No" text
            
            // Draw radio button at the vertical center
            doc.circle(optionX, verticalCenter, 4).stroke();
            if (isSelected) {
                doc.circle(optionX, verticalCenter, 2).fill();
            }
            
            // Calculate text position to vertically align with radio button center
            const textY = verticalCenter - doc.currentLineHeight() / 2;
            
            // Draw option text right after the radio button
            doc.text(labelText, optionX + 10, textY);
            
            optionX += 60; // Move to next option position
        });
        
        // Move to position for next row
        doc.y = rowY + rowHeight + 10;
    });

    doc.moveDown();
}

function printCommentsSection(doc, comments) {
    doc.font('Helvetica-Bold').fontSize(11).fillColor('black')
       .text(comments.sectionHeading || "Comments", 30, doc.y, { align: 'left', underline: true });
    doc.moveDown(0.5);

    // Print comment fields
    const commentFields = Object.entries(comments)
        .filter(([key, value]) => 
            key !== 'sectionHeading' && key !== 'agreement' &&
            typeof value === 'object' && value !== null && 
            'label' in value && 'value' in value);
    
    commentFields.forEach(([, field]) => {
        doc.font('Helvetica-Bold').fontSize(10).text(field.label, 30, doc.y);
        doc.font('Helvetica').fontSize(10).text(field.value, 30, doc.y + 15, { width: 530 });
        doc.moveDown(1.5);
    });

    // Print agreement checkbox if available
    if (comments.agreement) {
        printCheckbox(doc, comments.agreement);
    }

    doc.moveDown(0.5);
}

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
